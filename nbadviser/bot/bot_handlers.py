"""Callback function for bot handlers"""

import traceback

from telegram import Update, ParseMode, ReplyKeyboardMarkup
from telegram.ext import CallbackContext

from nbadviser import adviser, config
from nbadviser.adviser.adviser import Errors
from nbadviser.bot.utils import check_format, access_log
from nbadviser.config import logger, LINK_FULL_GAMES, LINK_STREAMS

BUTTON = "–¢–æ–ø–æ–≤—ã–µ –º–∞—Ç—á–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è üèÄ"
HELP_BUTTON = "–ü–æ–º–æ—â—å"


@access_log
def start(update: Update, context: CallbackContext):
    """Entry point to menu"""
    keyboard = [
        [BUTTON],
        [HELP_BUTTON]
    ]
    message = '–ü–æ–¥–±–µ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ç—á–∏ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è, ' \
              '–Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—è —Å—á–µ—Ç–∞!\n' \
              '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /top'
    update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True,
                                         resize_keyboard=True)
    )


@access_log
def help_handler(update: Update, context: CallbackContext):
    """Help button and command /help handler"""

    msg = '<b>NBAdviser</b> - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç ' \
          '—Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–≥—Ä—É\n\n' \
          '<b>/top</b> - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å\n' \
          '<b>/top 2022-01-12</b>  - –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å\n\n' \
          '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: https://t.me/NickFerd'

    update.message.reply_text(msg, parse_mode=ParseMode.HTML,
                              disable_web_page_preview=True)


@access_log
def get_recommendations(update: Update, context: CallbackContext) -> None:
    """Handler for making recommendations"""

    msg = update.message.reply_text(
        f'–ò–¥–µ—Ç –æ—Ç–±–æ—Ä –∏–≥—Ä...'
    )

    games_date = None
    if context.args:
        games_date_unchecked = context.args[0]  # Always look at first argument
        if check_format(games_date_unchecked):
            games_date = games_date_unchecked

    # Set additional parameters
    adviser.set_parameters(games_date=games_date)

    recommendations, errors = adviser.get_recommendations()
    handle_strategies_errors(context, errors)

    additional_text = f'\n<i>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö –º–∞—Ç—á–µ–π</i>:' \
                      f'\n{LINK_FULL_GAMES}'
    msg.edit_text(recommendations.to_html() + additional_text,
                  parse_mode=ParseMode.HTML,
                  disable_web_page_preview=True)

    # Additionally check for live games if user required last game day
    # and send results (if any) in separate message
    if not games_date:
        live_games_recommendation = adviser.get_live_games_or_none()
        if live_games_recommendation:
            header = '<i>–ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:</i>\n'
            footer = f'\n<i>–°—Å—ã–ª–∫–∞ —Å–æ —Å—Ç—Ä–∏–º–∞–º–∏ –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ</i>:' \
                     f'\n{LINK_STREAMS}'
            message = header + live_games_recommendation.to_html() + footer
            update.message.reply_text(message,
                                      parse_mode=ParseMode.HTML,
                                      disable_web_page_preview=True)


def error_handler(update: Update, context: CallbackContext) -> None:
    """Handle errors, that happen outside of executing strategies"""

    # Message to client
    update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    # Logging and alerting control chat
    tb = traceback.format_tb(context.error.__traceback__)
    tb = ''.join(tb)

    msg = f'<u>BOT ERROR</u>:\n' \
          f'Error: {context.error}\n'

    # Send notification to control chat
    if config.SEND_ON_ERROR:
        context.bot.send_message(chat_id=config.CONTROL_CHAT_ID, text=msg,
                                 parse_mode=ParseMode.HTML)

    # Add traceback and log
    msg += f"Traceback (most recent call last):\n" \
           f"{tb}"
    logger.error(msg)


def handle_strategies_errors(context: CallbackContext,
                             errors: Errors) -> None:
    """Handle errors that occur during execution of strategies"""
    for error in errors:
        msg = f"<u>STRATEGY ERROR</u>\n"
        msg += f"Strategy: {error.label}\n" \
               f"Exception: {error.exception}\n"

        # Send notification to control chat
        if config.SEND_ON_ERROR:
            context.bot.send_message(chat_id=config.CONTROL_CHAT_ID, text=msg,
                                     parse_mode=ParseMode.HTML)

        # Add traceback and log
        msg += f"{error.traceback}"
        logger.error(msg)
